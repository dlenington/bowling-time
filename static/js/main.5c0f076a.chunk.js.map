{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["frameNumbers","framesInitialState","Array","fill","rollNumber","total","firstRoll","secondRoll","currentPinsDown","strike","spare","playerInitialState","playerNumber","score","frames","gameInitialState","players","currentPlayer","winner","currentFrameNumber","gameReducer","state","action","type","push","length","console","log","currentFrame","pinsDown","previousFrameTotal","isLastInLine","strikeIndex","spareIndex","App","useImmerReducer","game","gameDispatch","onClick","min","max","Math","ceil","floor","random","roll","isLastPlayer","winnerNumber","forEach","player","calculateWinner","map","frameNumber","frame","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5c0f076a.chunk.js","sourcesContent":["import React from \"react\";\nimport { useImmerReducer } from \"use-immer\";\n\nimport \"./App.css\";\n\nconst frameNumbers = [\"\", 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\ninterface Frame {\n  rollNumber: number;\n  total: number;\n  firstRoll: number;\n  secondRoll: number;\n  currentPinsDown: number;\n  strike: boolean;\n  spare: boolean;\n}\n\nconst frameInitialState: Frame = {\n  rollNumber: 1,\n  total: 0,\n  firstRoll: 0,\n  secondRoll: 0,\n  currentPinsDown: 0,\n  strike: false,\n  spare: false,\n};\n\nconst framesInitialState = Array(10).fill({ ...frameInitialState });\n\ninterface Player {\n  playerNumber: number | null;\n  score: number;\n  frames: Frame[];\n}\n\nconst playerInitialState: Player = {\n  playerNumber: null,\n  score: 0,\n  frames: [...framesInitialState],\n};\n\ninterface Game {\n  players: Player[];\n  currentPlayer: Player;\n  currentFrameNumber: number;\n  winner: string;\n}\n\nconst gameInitialState: Game = {\n  players: [],\n  currentPlayer: {\n    playerNumber: null,\n    score: 0,\n    frames: [],\n  },\n  winner: \"\",\n  currentFrameNumber: 1,\n};\n\ntype GameActionType =\n  | \"addPlayer\"\n  | \"recordStrike\"\n  | \"recordSpare\"\n  | \"addToScore\"\n  | \"callWinner\"\n  | \"nextFrame\"\n  | \"nextPlayer\"\n  | \"nextRoll\"\n  | \"addFirstPlayer\"\n  | \"addToStrike\"\n  | \"addToSpare\";\ninterface GameAction {\n  type: GameActionType;\n  pinsDown?: number;\n  playerNumber?: number;\n  spareIndex?: number;\n  strikeIndex?: number;\n}\n\nconst gameReducer = (state: Game, action: GameAction) => {\n  switch (action.type) {\n    case \"addPlayer\":\n      {\n        state.players.push({\n          ...playerInitialState,\n          playerNumber: state.players.length + 1,\n        });\n      }\n      break;\n    case \"recordStrike\":\n      {\n        console.log(\"STRIKE\", action);\n        let currentFrame =\n          state.players[action.playerNumber! - 1].frames[\n            state.currentFrameNumber\n          ];\n        currentFrame.firstRoll = 10;\n        currentFrame.total = 10;\n        currentFrame.rollNumber = 2;\n      }\n      break;\n    case \"recordSpare\":\n      {\n        console.log(\"SPARE\", action);\n        if (!action.playerNumber) {\n          return console.log(\"player Number not recieved. CASE: recordSpare\");\n        }\n        let currentFrame =\n          state.players[(action.playerNumber! - 1) as number].frames[\n            state.currentFrameNumber\n          ];\n        currentFrame.total = 10;\n        currentFrame.rollNumber = 2;\n      }\n      break;\n    case \"addToScore\":\n      {\n        if (!action.playerNumber) {\n          return console.log(\"player Number not recieved. CASE: addToScore\");\n        }\n        let currentFrame =\n          state.players[action.playerNumber! - 1].frames[\n            state.currentFrameNumber - 1\n          ];\n        console.log(\"currentFrame\", currentFrame);\n        if (currentFrame.rollNumber === 1) {\n          currentFrame.firstRoll = action.pinsDown!;\n          currentFrame.total = action.pinsDown!;\n        } else if (currentFrame.rollNumber === 2) {\n          currentFrame.secondRoll = currentFrame.firstRoll + action.pinsDown!;\n          currentFrame.total = currentFrame.firstRoll + action.pinsDown!;\n        }\n      }\n      break;\n    case \"callWinner\":\n      {\n        state.winner = `Player ${action.playerNumber}`;\n      }\n      break;\n    case \"nextFrame\":\n      {\n        let currentPlayer = state.players[action.playerNumber! - 1];\n        let currentFrame = currentPlayer.frames[state.currentFrameNumber - 1];\n        let previousFrameTotal = 0;\n\n        if (state.currentFrameNumber >= 2)\n          previousFrameTotal =\n            currentPlayer.frames[state.currentFrameNumber - 2].total;\n\n        currentFrame.total =\n          previousFrameTotal + currentFrame.firstRoll + currentFrame.secondRoll;\n\n        state.currentFrameNumber++;\n      }\n      break;\n    case \"nextPlayer\":\n      {\n        if (!action.playerNumber) {\n          return console.log(\"player Number not recieved. CASE: nextPlayer\");\n        }\n\n        let isLastInLine = action.playerNumber === state.players.length - 1;\n        if (isLastInLine) state.currentPlayer = state.players[0];\n        else state.currentPlayer = state.players[action.playerNumber++];\n      }\n      break;\n    case \"nextRoll\":\n      {\n        let currentFrame =\n          state.players[(action.playerNumber! - 1) as number].frames[\n            state.currentFrameNumber - 1\n          ];\n        currentFrame.rollNumber++;\n      }\n      break;\n    case \"addFirstPlayer\":\n      {\n        console.log(\"state\", state);\n        state.players.push({\n          ...playerInitialState,\n          playerNumber: state.players.length + 1,\n        });\n\n        state.currentPlayer = state.players[0];\n      }\n      break;\n    case \"addToStrike\":\n      {\n        let currentFrame =\n          state.players[state.currentPlayer.playerNumber as number].frames[\n            action.strikeIndex as number\n          ];\n        currentFrame.total += action.pinsDown!;\n        if (currentFrame.rollNumber === 1)\n          currentFrame.firstRoll = action.pinsDown!;\n        else if (currentFrame.rollNumber === 2)\n          currentFrame.secondRoll = action.pinsDown!;\n      }\n      break;\n    case \"addToStrike\": {\n      state.players[state.currentPlayer.playerNumber as number].frames[\n        action.spareIndex as number\n      ].total += action.pinsDown!;\n      state.players[state.currentPlayer.playerNumber as number].frames[\n        state.currentFrameNumber\n      ].firstRoll = action.pinsDown!;\n    }\n  }\n};\n\nfunction App() {\n  const [game, gameDispatch] = useImmerReducer(gameReducer, gameInitialState);\n\n  const getMinOfRange = (currentPins: number) => 10 - currentPins;\n\n  const calculateWinner = (): number => {\n    let winnerScore = 0;\n    let winner = -1;\n    game.players.forEach((player) => {\n      if (player.score > winnerScore) winner = player.playerNumber as number;\n    });\n\n    return winner;\n  };\n\n  const roll = (min: number, max: number): number => {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  };\n\n  const getPreviousStrikes = (): number => {\n    if (game.currentFrameNumber === 1) return -1;\n\n    if (game.currentPlayer.frames[game.currentFrameNumber - 1].strike)\n      return game.currentFrameNumber - 1;\n    else if (\n      game.currentPlayer.frames[game.currentFrameNumber - 2].strike &&\n      game.currentPlayer.frames.length >= 2\n    )\n      return game.currentFrameNumber - 2;\n    else return -1;\n  };\n\n  const getPreviousSpares = (): number => {\n    if (game.currentPlayer.frames.length < 1) return -1;\n\n    if (game.currentPlayer.frames[game.currentFrameNumber - 1].spare)\n      return game.currentFrameNumber - 1;\n    else return -1;\n  };\n\n  const handleAddPlayer = () => {\n    if (game.players.length === 0) gameDispatch({ type: \"addFirstPlayer\" });\n    else gameDispatch({ type: \"addPlayer\" });\n  };\n\n  const handleRoll = () => {\n    if (game.currentFrameNumber > 9) return;\n\n    let currentFrame =\n      game.players[game.currentPlayer.playerNumber! - 1].frames[\n        game.currentFrameNumber - 1\n      ];\n    if (currentFrame.rollNumber > 2) return;\n\n    const strikeIndex = getPreviousStrikes();\n    const spareIndex = getPreviousSpares();\n\n    let min = 0;\n\n    if (currentFrame.total > 0) min = getMinOfRange(currentFrame.total);\n\n    const pinsDown = roll(min, 10);\n\n    if (pinsDown === 10 && currentFrame.rollNumber === 1)\n      gameDispatch({\n        type: \"recordStrike\",\n        playerNumber: game.currentPlayer.playerNumber as number,\n        pinsDown,\n      });\n    else if (pinsDown === 10 && currentFrame.rollNumber === 2)\n      gameDispatch({\n        type: \"recordSpare\",\n        playerNumber: game.currentPlayer.playerNumber as number,\n        pinsDown,\n      });\n    else if (strikeIndex !== -1)\n      gameDispatch({ type: \"addToStrike\", strikeIndex, pinsDown });\n    else if (spareIndex !== -1)\n      gameDispatch({ type: \"addToSpare\", spareIndex, pinsDown });\n    else\n      gameDispatch({\n        type: \"addToScore\",\n        playerNumber: game.currentPlayer.playerNumber as number,\n        pinsDown,\n      });\n\n    let isLastPlayer = game.currentPlayer.playerNumber === game.players.length;\n\n    if (\n      currentFrame.rollNumber === 2 &&\n      isLastPlayer &&\n      game.currentFrameNumber === 10\n    ) {\n      let winnerNumber = calculateWinner();\n      return gameDispatch({ type: \"callWinner\", playerNumber: winnerNumber });\n    } else if (currentFrame.rollNumber === 2 && isLastPlayer)\n      return gameDispatch({\n        type: \"nextFrame\",\n        playerNumber: game.currentPlayer.playerNumber as number,\n      });\n    else if (currentFrame.rollNumber === 2)\n      return gameDispatch({\n        type: \"nextPlayer\",\n        playerNumber: game.currentPlayer.playerNumber as number,\n      });\n\n    gameDispatch({\n      type: \"nextRoll\",\n      playerNumber: game.currentPlayer.playerNumber as number,\n    });\n  };\n\n  return (\n    <div>\n      <h1>Bowling Time</h1>\n      <button onClick={handleAddPlayer}>Add player</button>\n\n      <button onClick={handleRoll}>Roll</button>\n\n      <table>\n        {game.players.length > 0 && (\n          <tr>\n            {frameNumbers.map((frameNumber) => (\n              <th>{frameNumber}</th>\n            ))}\n          </tr>\n        )}\n        <tbody>\n          {game.players.map(({ playerNumber, frames }) => (\n            <tr>\n              <p>{`Player ${playerNumber}`}</p>\n              {frames.map((frame) => (\n                <td>\n                  <p>{`First Roll ${frame.firstRoll}`}</p>\n                  <p>{`Second Roll ${frame.secondRoll}`}</p>\n                  <p>{`Total ${frame.total}`}</p>\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}